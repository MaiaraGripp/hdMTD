% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MTDest.R
\name{MTDest}
\alias{MTDest}
\title{EM estimation of MTD parameters}
\usage{
MTDest(
  X,
  S,
  M = 0.01,
  init,
  iter = FALSE,
  nIter = 100,
  A = NULL,
  oscillations = FALSE
)
}
\arguments{
\item{X}{A MTD chain sample}

\item{S}{The relevant lag set (sorted positive integer numbers).}

\item{M}{A stopping point for the EM algorithm. If NULL the algorithm will run
for a total of nIter iteractions.}

\item{init}{A list with initial parameters: 'p0' optional, 'lambdas' required,
'pj' required. The order of elements in 'lambdas'}

\item{iter}{If True, returns the number of iterations of the
algorithm, that is, the number of times the initial parameters
were updated.}

\item{nIter}{An integer positive number with the maximum number of iterations.}

\item{A}{The states space (sorted positive integer numbers).}

\item{oscillations}{If TRUE the function will return the estimated oscillations
for the updated model along with the estimated parameters.}
}
\value{
A list with the estimated parameters of the MTD model
}
\description{
Estimation of MTD parameters through EM algorithm.
}
\details{
Regarding the 'M' parameter: it functions as a stopping
criterion within the EM algorithm. When the difference between
the log-likelihood computed with the newly estimated parameters
and that computed with the previous parameters falls below M,
the algorithm halts. Nevertheless, if the value of nIter
(which represents the maximum number of iterations) is smaller
than the number of iterations required to meet the M criterion,
the algorithm will conclude its execution when nIter is reached.
To ensure that the M criterion is effectively utilized, we
recommend using a higher value for nIter, which is set to a
default of 100.

Concerning the 'init' parameter, it is expected to be a list
comprising either 2 or 3 entries. These entries consist of:
an optional vector named 'p0' (representing an independent
distribution, the order must follow that of A), a required list
of matrices 'pj' (a list containing a stochastic matrix for each
element of S, also ordered from the smallest to the greatest
element of S), and a vector named 'lambdas' (representing
the weights, first the weight for p0, and then for each element
in pj). If your MTD model does not have an independent
distribution p0, just set the first entry of init$lambda to 0.
}
\section{Author(s):}{
This function was created based on the following article:
Lebre, Sophie & Bourguignon, Pierre-Yves. (2008). An EM algorithm for estimation
in the Mixture Transition Distribution model. Journal of Statistical Computation
and Simulation. 78. \url{https://doi.org/10.1080/00949650701266666}.
}

\examples{
MTD <- MTDmodel(Lambda=c(1,10),A=c(0,1),lam0=0.01)
X <- perfectSample(MTD,N=2000)
init <- list('p0'=c(0.4,0.6),'lambdas'=c(0.05,0.45,0.5),
'pj'=list(matrix(c(0.2,0.8,0.45,0.55),byrow = TRUE,ncol=2),
matrix(c(0.25,0.75,0.3,0.7),byrow = TRUE,ncol=2)))
MTDest(X,S=c(1,10),M=1,init)
MTDest(X,S=c(1,10),init=init,iter = TRUE)
MTDest(X,S=c(1,10),init=init,iter = TRUE,nIter=5)
MTDest(X,S=c(1,10),init=init,oscillations = TRUE)
}
